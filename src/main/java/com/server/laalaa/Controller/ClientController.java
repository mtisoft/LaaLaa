package com.server.laalaa.Controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import java.util.HashMap;
import java.util.Map;

import com.server.laalaa.Exception.ResourceNotFoundException;
import com.server.laalaa.Model.Client;
import com.server.laalaa.Repository.ClientRepository;

@Controller
@RequestMapping(path="/client")
public class ClientController {
    
    @Autowired // This means to get the bean called usersRepository
         // Which is auto-generated by Spring, we will use it to handle the data
    private ClientRepository ClientRepository;
    
    // // create employee rest api
	// @PostMapping("/employees")
	// public Employee createEmployee(@RequestBody Employee employee) {
	// 	return employeeRepository.save(employee);
    // }
    

    //adding a client
    @PostMapping(path="/add")
    public @ResponseBody String addClient( 
           @RequestParam String code_client,
           @RequestParam String nom,
           @RequestParam String prenom,
           @RequestParam char sexe,
           @RequestParam Integer telephone,
           @RequestParam Integer nbre_cmde ){

            Client cl = new Client();

            cl.setCODE_CLIENT(code_client);
            cl.setNOM(nom);
            cl.setPRENOM(prenom);
            cl.setSEXE(sexe);
            cl.setTELEPHONE(telephone);
            cl.setNBRE_CMDE(nbre_cmde);

            ClientRepository.save(cl);

            return "saved";
    }

    //update a client
    @PutMapping("/client/{id}")
    public ResponseEntity<Client> updateClient(@PathVariable Integer id,
        @RequestParam String CODE_CLIENT,
        @RequestParam String Nom,
        @RequestParam String Prenom,
        @RequestParam Character  sexe,
        @RequestParam Integer Telephone,
        @RequestParam Integer NBRE_CMDE ){
        
        //this is a test

		Client cli = ClientRepository.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("Employee not exist with id :" + id));
		
        Client cli_fin = ClientRepository.save(cli);
		return ResponseEntity.ok(cli_fin);
    }
    
    //get all client
    @GetMapping(path="/all")
    public @ResponseBody Iterable<Client> getAllClient(){
        return ClientRepository.findAll();
    }


    //delete a client
	@DeleteMapping("/client/{id}")
	public ResponseEntity<Map<String, Boolean>> deleteClient(@PathVariable Integer id){
        
        Client cli = ClientRepository.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("Employee not exist with id :" + id));
		
        ClientRepository.delete(cli);
		Map<String, Boolean> response = new HashMap<>();
		response.put("deleted", Boolean.TRUE);
		return ResponseEntity.ok(response);
	}

    //select a client
    @GetMapping("/client/{id}")
	public ResponseEntity<Client> getClientById(@PathVariable("id") Integer id_Client ) {
		Client cli = ClientRepository.findById(id_Client)
				.orElseThrow(() -> new ResourceNotFoundException("Employee not exist with id :" + id_Client));
		return ResponseEntity.ok(cli);
	}
    
}

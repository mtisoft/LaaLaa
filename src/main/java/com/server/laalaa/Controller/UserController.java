package com.server.laalaa.Controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import com.server.laalaa.Exception.ResourceNotFoundException;
import com.server.laalaa.Model.Users;
import com.server.laalaa.Repository.UsersRepository;




@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {

  @Autowired // This means to get the bean called usersRepository// Which is auto-generated by Spring, we will use it to handle the data
  private UsersRepository usersRepository;

  @Autowired
  EntityManager entityManager ;

  // CREATION D UN UTILISATEUR.
  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (
         //@RequestParam String matricule, 
         @RequestParam String passw,
         @RequestParam String code_type,
         @RequestParam String code_equipe,
         @RequestParam String nom,
         @RequestParam String prenom,
         @RequestParam char sexe,
         @RequestParam Integer telephone,
         @RequestParam String poste,
         @RequestParam String code_ville_user,
         @RequestParam Date date_creat_user ) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    String matricule = GenerateMatricule();  // generation matricule du nouvelle utilisateur.

        Users n = new Users();
        n.setMATRICULE(matricule);
        n.setPASSW(passw);
        n.setEN_SERVICE(false);
        n.setCODE_TYPE(code_type);
        n.setCODE_EQUIPE(code_equipe);
        n.setNOM(nom);
        n.setPRENOM(prenom);
        n.setSEXE(sexe);
        n.setTELEPHONE(telephone);
        n.setPOSTE(poste);
        n.setCODE_VILLE_USER(code_ville_user);
        n.setDATE_CREAT_USER(date_creat_user);

        usersRepository.save(n);
        return "User created |  Matricule : "+ matricule;
  }


  // retourne la liste complete des utilisateurs
  @GetMapping(path="/all")
  public @ResponseBody Iterable<Users> getAllUsers() {
    // This returns a JSON or XML with the users
    return usersRepository.findAll();
  }


  // GENERER LE MATRICULE D'UN UTILISATEUR.
  public String GenerateMatricule(){
     String mat="";  // le matricule generer est su 4 caracteres
     Long cnt;
     cnt = usersRepository.count();

     switch (String.valueOf(cnt).length()){
       case 1 : mat="000"+cnt;
       case 2 : mat="00"+cnt;
       case 3 : mat="0"+cnt;
       case 4 : mat=""+cnt;
     }
     return mat;
  }


  // CODE DE MODIFICATION D UN UTILISATEUR
     @PutMapping("/update/{id}")
     public  @ResponseBody ResponseEntity<Users> updateUser(@PathVariable Integer id,
        //@RequestParam String passw,
        @RequestParam String code_type,
        @RequestParam String code_equipe,
        @RequestParam String nom,
        @RequestParam String prenom,
        @RequestParam char sexe,
        @RequestParam Integer telephone,
        @RequestParam Boolean EN_SERVICE,
        @RequestParam String poste
        //@RequestParam String code_ville_user,
        //@RequestParam Date date_creat_user
        ) {
 
         Users user = usersRepository.findById(id)
                 .orElseThrow(() -> new ResourceNotFoundException("User not exist with id :" + id));

            user.setCODE_TYPE(code_type);
            user.setCODE_EQUIPE(code_equipe);
            user.setNOM(nom); 
            user.setPRENOM(prenom);
            user.setSEXE(sexe);
            user.setTELEPHONE(telephone);
            user.setEN_SERVICE(true);
            user.setPOSTE(poste);
            //user.setCODE_VILLE_USER(code_ville_user);
            //user.setDATE_CREAT_USER(dATE_CREAT_USER);
 
         Users user_fin = usersRepository.save(user);
         return ResponseEntity.ok(user_fin);
     }

  // CODE  D'ACTIVATION OU DE DESACTIVATION D'UN UTILISATEUR.
  @PutMapping(value="activation/{id}")
  public @ResponseBody ResponseEntity<Users> changeStatusUser(@PathVariable Integer id, @RequestParam Boolean en_service) {
    
    Users user = usersRepository.findById(id)
                 .orElseThrow(() -> new ResourceNotFoundException("User not exist with id :" + id));

    user.setEN_SERVICE(en_service); // we change the status activation of the user

    Users user_fin = usersRepository.save(user);
    return ResponseEntity.ok(user_fin);
  }


  // SUPPRIMER UN utilisateur
  @DeleteMapping(path="delete/{id}")
  public @ResponseBody ResponseEntity<Map<String,Boolean>> deleteUser(@PathVariable Integer id){
    
    Users user = usersRepository.findById(id)
                  .orElseThrow(()-> new ResourceNotFoundException("User not exist with id : "+id));
  
    usersRepository.delete(user);
    Map<String, Boolean> response = new HashMap<>();
    response.put("deleted", Boolean.TRUE);
    return ResponseEntity.ok(response);
  }

  
  // AFFICHER UN UTILISATEUR en fonction de son id 
  @GetMapping(path="/get/{id}")
  public @ResponseBody ResponseEntity<Users> getUserById(@PathVariable Integer id){
    Users user = usersRepository.findById(id)
                    .orElseThrow(()-> new ResourceNotFoundException("User not exist with id : "+id));
    return ResponseEntity.ok(user);
  }

  // AFFICHER UN UTILISATEUR en fonction de son matricule
  @GetMapping("/get/{mat}")
  @ResponseBody ArrayList<Users> getUserByMatricule(@PathVariable String mat){
         
      String qlString ="select u from Users u where matricule='"+mat+"'";
      System.out.println(qlString);
      Query query = entityManager.createQuery(qlString);
      ArrayList<Users> resultList = (ArrayList<Users>)query.getResultList();
      return resultList;
  }

  // Recherche en fonction du type_compte , du Nom, telephone et du matricule

  
  // MODIFIER LE MOT DE PASSE D'UN UTILISATEUR CONNAISSANT SON MATRICULE
  // AFFICHER LES REALISATIONS D UN UTILISATEUR. SUR UNE PERRIODE
  
}

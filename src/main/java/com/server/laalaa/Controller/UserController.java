package com.server.laalaa.Controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Date;

import com.server.laalaa.Model.Users;
import com.server.laalaa.Repository.UsersRepository;


@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
  @Autowired // This means to get the bean called usersRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UsersRepository usersRepository;

  // CREATION D UN UTILISATEUR.
  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (
         @RequestParam String matricule, 
         @RequestParam String passw,
         @RequestParam String code_type,
         @RequestParam String code_equipe,
         @RequestParam String nom,
         @RequestParam String prenom,
         @RequestParam char sexe,
         @RequestParam Integer telephone,
         @RequestParam String poste,
         @RequestParam String code_ville_user,
         @RequestParam Date date_creat_user ) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Users n = new Users();
    n.setMATRICULE(matricule);
    n.setPASSW(passw);
    n.setEN_SERVICE(false);
    n.setCODE_TYPE(code_type);
    n.setCODE_EQUIPE(code_equipe);
    n.setNOM(nom);
    n.setPRENOM(prenom);
    n.setSEXE(sexe);
    n.setTELEPHONE(telephone);
    n.setPOSTE(poste);
    n.setCODE_VILLE_USER(code_ville_user);
    n.setDATE_CREAT_USER(date_creat_user);

    usersRepository.save(n);
    return "Saved";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<Users> getAllUsers() {
    // This returns a JSON or XML with the users
    return usersRepository.findAll();
  }

  // CODE  D ACTIVATION OU DE DEACTIVATION D UN UTILISATEUR.
  // CODE DE MODIFICATION D UN UTILISATEUR. / AFFICHER UN UTILISATEUR (SELECT USER)
  // Afficher la liste des comptes (recherche) en fonction du typed de compte et en fonction du Nom .  et du telephone
  
}
